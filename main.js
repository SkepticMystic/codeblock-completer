/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// src/main.ts
__export(exports, {
  default: () => CCPlugin
});
var import_obsidian3 = __toModule(require("obsidian"));

// src/const.ts
var DEFAULT_SETTINGS = {
  customTypes: []
};

// src/SettingTab.ts
var import_obsidian = __toModule(require("obsidian"));

// src/utils.ts
var splitAndTrim = (fields) => {
  if (!fields || fields === "")
    return [];
  else
    return fields.split(",").map((str) => str.trim());
};

// src/SettingTab.ts
var SettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl, plugin } = this;
    const { settings } = plugin;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Custom Codeblocks").setDesc("A comma-separated list of codeblocks types to suggest (aside from those added by your plugins).").addText((text) => {
      text.setValue(settings.customTypes.join(", "));
      text.inputEl.onblur = async () => {
        const value = text.getValue();
        settings.customTypes = splitAndTrim(value);
        await plugin.saveSettings();
      };
    });
  }
};

// src/Suggester.ts
var import_obsidian2 = __toModule(require("obsidian"));
var CodeblockSuggester = class extends import_obsidian2.EditorSuggest {
  constructor(plugin) {
    super(plugin.app);
    this.getSuggestions = (context) => {
      const { query } = context;
      const fromPlugins = Object.keys(import_obsidian2.MarkdownPreviewRenderer.codeBlockPostProcessors);
      return [...this.plugin.settings.customTypes, ...fromPlugins].filter((sug) => sug.includes(query));
    };
    this.plugin = plugin;
  }
  onTrigger(cursor, editor, _) {
    const sub = editor.getLine(cursor.line).substring(0, cursor.ch);
    const match = sub.match(/^```(.*)$/)?.[1];
    if (match !== void 0) {
      return {
        start: {
          ch: sub.lastIndexOf(match),
          line: cursor.line
        },
        end: cursor,
        query: match
      };
    }
    return null;
  }
  renderSuggestion(suggestion, el) {
    el.createDiv({
      text: suggestion,
      cls: "codeblock-suggestion"
    });
  }
  addLineBreak(nextLine) {
    return nextLine === "```" || nextLine === "" || nextLine === "\n" ? "\n\n" : "";
  }
  addClosingBackticks(currLine, nextLine) {
    return (currLine === "```" || currLine.length > 3 && !currLine.endsWith("```")) && (nextLine === "" || nextLine === "\n") ? "```" : "";
  }
  selectSuggestion(suggestion) {
    const { context, addLineBreak, addClosingBackticks } = this;
    if (context) {
      const { start, end, editor } = context;
      const currLine = editor.getLine(end.line);
      const nextLine = editor.getLine(end.line + 1);
      const replacement = `\`\`\`${suggestion}${addLineBreak(nextLine)}${addClosingBackticks(currLine, nextLine)}`;
      editor.replaceRange(replacement, { ch: 0, line: start.line }, end);
      editor.setCursor({ ch: 0, line: end.line + 1 });
    }
  }
};

// src/main.ts
var CCPlugin = class extends import_obsidian3.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new SettingTab(this.app, this));
    this.registerEditorSuggest(new CodeblockSuggester(this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,
